import { ChatMessage, dataDetailResponse, HistoryResult } from "@/types/aichat";

export const updateChatHistory = (
    newDataList: dataDetailResponse[],
    setChatHistory: React.Dispatch<React.SetStateAction<ChatMessage[]>>
) => {
    if (newDataList.length === 0) {
        setChatHistory([
            {
                user: "",
                ai: "Xin chÃ o! TÃ´i lÃ  trá»£ lÃ½ AI cá»§a báº¡n. TÃ´i cÃ³ thá»ƒ giÃºp báº¡n táº¡o phÃ¢n khÃºc khÃ¡ch hÃ ng dá»±a trÃªn dá»¯ liá»‡u cá»§a báº¡n. Báº¡n muá»‘n phÃ¢n khÃºc khÃ¡ch hÃ ng nhÆ° tháº¿ nÃ o?",
            },
        ]);
        return;
    }

    setChatHistory((prevHistory) => {
        const existingUserQueries = new Set(prevHistory.map((msg) => msg.user));

        const newMessages: ChatMessage[] = newDataList
            .filter((data) => !existingUserQueries.has(data.query))
            .map((data) => ({
                user: data.query,
                ai: `ðŸ“Œ ${data.explanation.query_intent}\n${data.explanation.key_conditions.map(item => `â€¢ ${item}`).join("\n")}\n\n`,
            }));

        return [...prevHistory, ...newMessages];
    });
};

export const updateHistoryResult = (
    newDataList: dataDetailResponse[],
    setHistoryResult: React.Dispatch<React.SetStateAction<HistoryResult[]>>
) => {
    if (newDataList.length === 0) {
        setHistoryResult([]); // hoáº·c giá»¯ nguyÃªn náº¿u khÃ´ng muá»‘n reset
        return;
    }

    setHistoryResult((prev) => {
        const existingQueries = new Set(prev.map((entry) => entry.result.query));
        const createVersion = [...prev];

        const newEntries: HistoryResult[] = newDataList
            .filter((data) => !existingQueries.has(data.query))
            .map((data, index) => ({
                version: `version ${createVersion.length + index + 1}`,
                result: data,
            }));

        return [...createVersion, ...newEntries];
    });
};
